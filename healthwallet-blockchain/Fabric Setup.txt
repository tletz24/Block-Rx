Pre-requisites - AWS Cloud9

cd ~
git clone https://github.com/msloma144/healthwallet.git

sudo pip install awscli --upgrade

##Step 1 - Create the Hyperledger Fabric blockchain network
export REGION=us-east-1
export STACKNAME=healthwallet-amb
cd ~/healthwallet/healthwallet-fabric
chmod +x amb.sh
./amb.sh

##Step 3 - Create the Fabric client node
export REGION=us-east-1
cd ~/healthwallet/healthwallet-fabric
VPCENDPOINTSERVICENAME=<< ### BLOCKCHAIN VPC SERVICE ENDPOINT DNS NAME ### >>  ## pulled from the blockchain network page
chmod +x vpc-client-node.sh
./vpc-client-node.sh

##Step 4 - Prepare the Fabric client node and enroll an identity
cd ~
ssh ec2-user@<< ### EC2 INSTANCE DNS NAME ### >> -i ~/healthwallet-keypair.pem  ## get dns name from EC2
git clone https://github.com/msloma144/healthwallet.git

export REGION=us-east-1
cd ~/healthwallet/healthwallet-fabric
cp templates/exports-template.sh fabric-exports.sh
source fabric-exports.sh
source ~/peer-exports.sh 

cat ~/peer-exports.sh 
aws s3 cp s3://us-east-1.managedblockchain/etc/managedblockchain-tls-chain.pem  /home/ec2-user/managedblockchain-tls-chain.pem

export PATH=$PATH:/home/ec2-user/go/src/github.com/hyperledger/fabric-ca/bin
cd ~
fabric-ca-client enroll -u https://$ADMINUSER:$ADMINPWD@$CASERVICEENDPOINT --tls.certfiles /home/ec2-user/managedblockchain-tls-chain.pem -M /home/ec2-user/admin-msp 

mkdir -p /home/ec2-user/admin-msp/admincerts
cp ~/admin-msp/signcerts/* ~/admin-msp/admincerts/
cd ~/healthwallet/healthwallet-fabric

##Step 5 - Update the configtx channel configuration

cp ~/healthwallet/healthwallet-fabric/configtx.yaml ~
sed -i "s|__MEMBERID__|$MEMBERID|g" ~/configtx.yaml

docker exec cli configtxgen -outputCreateChannelTx /opt/home/$CHANNEL.pb -profile OneOrgChannel -channelID $CHANNEL --configPath /opt/home/
ls -lt ~/$CHANNEL.pb 

##Step 6 - Create a Fabric channel
docker exec -e "CORE_PEER_TLS_ENABLED=true" -e "CORE_PEER_TLS_ROOTCERT_FILE=/opt/home/managedblockchain-tls-chain.pem" \
    -e "CORE_PEER_ADDRESS=$PEER" -e "CORE_PEER_LOCALMSPID=$MSP" -e "CORE_PEER_MSPCONFIGPATH=$MSP_PATH" \
    cli peer channel create -c $CHANNEL -f /opt/home/$CHANNEL.pb -o $ORDERER --cafile $CAFILE --tls --timeout 900s
	
ls -lt /home/ec2-user/fabric-samples/chaincode/hyperledger/fabric/peer

docker exec -e "CORE_PEER_TLS_ENABLED=true" -e "CORE_PEER_TLS_ROOTCERT_FILE=/opt/home/managedblockchain-tls-chain.pem"  \
    -e "CORE_PEER_ADDRESS=$PEER"  -e "CORE_PEER_LOCALMSPID=$MSP" -e "CORE_PEER_MSPCONFIGPATH=$MSP_PATH" \
    cli peer channel fetch oldest /opt/home/fabric-samples/chaincode/hyperledger/fabric/peer/$CHANNEL.block \
    -c $CHANNEL -o $ORDERER --cafile /opt/home/managedblockchain-tls-chain.pem --tls  
	
##Step 7 - Join your peer node to the channel
docker exec -e "CORE_PEER_TLS_ENABLED=true" -e "CORE_PEER_TLS_ROOTCERT_FILE=/opt/home/managedblockchain-tls-chain.pem" \
    -e "CORE_PEER_ADDRESS=$PEER" -e "CORE_PEER_LOCALMSPID=$MSP" -e "CORE_PEER_MSPCONFIGPATH=$MSP_PATH" \
    cli peer channel join -b $CHANNEL.block  -o $ORDERER --cafile $CAFILE --tls
	
### Step 8 - Install chaincode on your peer node
### docker exec -e "CORE_PEER_TLS_ENABLED=true" -e "CORE_PEER_TLS_ROOTCERT_FILE=/opt/home/managedblockchain-tls-chain.pem" \
###     -e "CORE_PEER_ADDRESS=$PEER" -e "CORE_PEER_LOCALMSPID=$MSP" -e "CORE_PEER_MSPCONFIGPATH=$MSP_PATH" \
###     cli peer chaincode install -n $CHAINCODENAME -v $CHAINCODEVERSION -p $CHAINCODEDIR
### 	
### 	
### Step 9 - Instantiate the chaincode on the channel
### docker exec -e "CORE_PEER_TLS_ENABLED=true" -e "CORE_PEER_TLS_ROOTCERT_FILE=/opt/home/managedblockchain-tls-chain.pem" \
###     -e "CORE_PEER_ADDRESS=$PEER" -e "CORE_PEER_LOCALMSPID=$MSP" -e "CORE_PEER_MSPCONFIGPATH=$MSP_PATH" \
###     cli peer chaincode instantiate -o $ORDERER -C $CHANNEL -n $CHAINCODENAME -v $CHAINCODEVERSION \
###     -c '{"Args":["init","a","100","b","200"]}' --cafile $CAFILE --tls